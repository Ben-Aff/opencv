图像由像素点构成
每个像素点都有值0-255，表示亮度，值越大亮度越大
图像由R、G、B三个通道构成，黑白图只有一个通道（Opencv中的组成形式是BGR）
因此图像通常由三个矩阵表示
位深度：32(支持透明度)、24(不支持透明通道)
图像的分辨率表示宽和高的像素值
opencv不支持透明度的读取，都会统一读取为RGB三个通道的
图像色彩模式
位图模式
位图模式是图像中最基本的格式，图像只有黑色和白色像素，是色彩模式中占有空间最小的，同样也叫做黑白图，它包含的信息量最少，无法包含图像中的细节，相当于只有0或者1
一副彩色图如果要转换成黑白模式，则一般不能直接转换，需要首先将图像转换成灰度模式
灰度模式
灰度模式即使用单一色调来表示图像，与位图模式不同，不像位图只有0和1，使用256级的灰度来表示图像，一个像素相当于占用8为一个字节，每个像素值使用0到255的亮度值代表，其中0为黑色，255为白色，相当于从黑->灰->白的过度，通常我们所说的黑白照片就是这种模式，与位图模式相比，能表现出一定的细节，占用空间也比位图模式较大
RGB模式
RGB模式为我们经常见到的，被称为真色彩。RGB模式的图像有3个颜色通道，分布为红（Red）,绿（Green）和蓝（Bule），每个都占用8位一个字节来表示颜色信息，这样每个颜色的取值范围为0~255，那么就三种颜色就可以有多种组合，
当三种基色的值相等是，表现出为灰色，三种颜色都为255即为白色，三种颜色都为0，即为黑色
RGB模式的图像占用空间要比位图，灰度图都要大，但表现出的细节更加明显
#读取图片
img=cv2.imread("参数一",参数二)
参数一：图片位置
参数二：cv.IMREAD*COLOR：以彩色模式加载图像，任何图像的透明度都将被忽略。这是默认参数。
       cv.IMREAD*GRAYSCALE：以灰度模式加载图像
       cv.IMREAD_UNCHANGED：包括alpha通道的加载图像模式。
#展示图片
cv2.imshow("参数一",参数二)
参数一：显示窗口的名字
参数二：图像名
cv2.waitKey(0)
等待时间,毫秒级,0表示可以任意键结束，用cv.waitKey()给图像绘制留下时间，否则窗口会出现无响应情况，并且图像无法显示出来。
cv2.destroyAllWindows()
释放所有窗口
#保存图片
cv2.imwrite("参数一",参数二)
参数一：指定要保存的位置和图片的名字
参数二：图像名
#图片的色彩转换空间转换
OpenCV中有150多种颜色空间转换方法。最广泛使用的转换方法有三种，BGR-RGB、BGR-Gray和BGR-HSV。
cv.cvtColor(参数一，参数二)
参数一：图像名
参数二：图像转换方法
cv.COLOR_BGR2RGB : BGR to RGB
cv.COLOR_BGR2GRAY : BGR to Gray
cv.COLOR_BGR2HSV: BGR to HSV
#图像对象的创建与赋值
opencv中的图像都是numpy对象
#图像的形状
image.shape


#创建空白图像
(1)参数一=np.zeros((h，w，c),dtype=np.uint8)
参数一：图像名，常用black
(2)图像名=np.zeros_like(参数一)
参数一：要创立相同尺寸的图片变量名


#图像局部区域显示
1.ROI=图像名[](python列表切片操作)
2.空白图像[]=ROI

#创建窗口
cv2.namedWindow(参数一,参数二)
参数一：将显示图像/视频的窗口的名称
参数二：表示窗口大小是自动设置还是可调整。


#图像的拷贝操作
两种方式
1.使用numpy进行操作：图像1=np.copy(图像2)
2.直接用：图像1=图像2
注意：使用numpy的效果会更好


#opencv中的自带颜色表
applyColorMap(输入图像、输出图像、颜色表)
颜色表：













#图像的四则运算
OpenCV提供函数把两幅图像相加，或通过numpy操作添加两个图像，如res = img1 + img2。两个图像应该具有相同的大小和类型，或者第二个图像可以是标量值。
加法：cv.add(图像1，图像2/区域像素值)(增加图片的像素值来使得图片变亮或直接将两幅图片相加融合)
减法：cv.substract(图像1，图像2/区域像素值)(减少图片的像素值来使得图片变暗或直接将两幅图片相减)
乘法：cv.multiply(图像1，区域像素值倍数)(增加图片的对比度)
除法：cv.divide(图像1，区域像素值倍数)(减少图片的对比度)
注意：使用opencv进行操作，效果会更好
#图像的混合
本质也是加法，但是不同的是两幅图像的权重不同，这就会给人一种混合或者透明的感觉。图像混合的计算公式如下：
g(x) = (1−α)f0(x) + αf1(x)+γ
cv.addWeighted(图片1,1的权重,图片2,2的权重,γ)
#图像中像素的逻辑运算
cv2.bitwise_or(图像1，图像2)，对两张图像的像素值取或操作
cv2.bitwise_and(图像1，图像2)，对两张图像的像素值取与操作

注意：逻辑运算要求两个图像的形状完全相同
00001001，图像1的像素值
00001110，图像2的像素值
与操作00001000，都变成黑，取反操作11110111
或操作00001111，都变成白，取反操作11110000


#图像的通道分离与合并
(1)使用python中的切片操作
(2)cv.split()和cv.merge()的配合
cv2.split(参数一[,参数二])将3通道BGR彩色图像分离为B、G、R 单通道图像(一个三维数组)。
参数一：图像或nparray多维数组
参数二：指定的分拆通道（可选）





















#图像色彩空间转换

